(new model m)
(add-node m v1:'(3))
;=>

(add-constraint m v1:'(?...) (type int on ?0))
(add-constraint m v1:'(?...) (type int on ?1))
(add-constraint m v1:'(?...) (type int on ?2))
(add-constraint m v1:'(?...) (max 10 on ?0))
(add-constraint m v1:'(?...) (max 10 on ?1))
(add-constraint m v1:'(?...) (max 10 on ?2))
(add-constraint m v1:'(?...) (min 1  on ?0))
(add-constraint m v1:'(?...) (min 1  on ?1))
(add-constraint m v1:'(?...) (min 1  on ?2))
;=>

(add-constraint m v1:'(?x ?y ?z) (= (+ (^ ?x 2) (^ ?y 2)) (^ ?z 2)))
;=>

(defvar ?s (search m v2:'(?x ?y ?Z) from v1:'(?x ?y ?Z)))
;=>

(state-of ?s)
;=>

(start ?s)
;=>

(state-of ?s)
;=>

(list-stmt m from v2:'(?...))
;=>