(new model m)
;;;

(defun get-suffix (?t ?c)
    (let
        (?name (to-string ?t))
        (let
            (?pos (str-last-index-of ?name ?c))
            (if
                (equal ?pos -1)
                (return ?name)
                (return (str-substr ?name (+ ?pos 1) (length-of ?name)))
            )
        )
    )
)
;;;

(defun get-version-number (?t)
    (return (get-suffix ?t "v"))
)
;;;

(add-rule m
    if 
        '(?tag nm:typeOf nm:tag) 
        (can-cast '(int float) (get-version-number ?tag))
    do
        (defvar ?tagName (to-string ?tag)) 
        (defvar ?pos (str-last-index-of ?tagName "v"))
        (if
            (not (equal ?pos -1))
            (do             
                (defvar ?mainTag (to-atom (str-substr ?tagName 0 ?pos)))
                (defvar ?mainTagVersion (to-atom (strcat (to-string ?mainTag) "-version" )))
                (if
                    (has-stmt m '(?mainTag nm:typeOf nm:tag))
                    (do
                        (-> '(?tag nm:isVersionOf ?mainTag)           )
                        (-> '(?tag nm:beDefinedByTag ?mainTagVersion) )
                    )
                )
            )
        )
)
;;;

(add-stmt m '(MYSQL nm:typeOf nm:tag))
(add-stmt m '(MYSQLv8 nm:typeOf nm:tag))
(add-stmt m '(Java nm:typeOf nm:tag))
(add-stmt m '(Javav8 nm:typeOf nm:tag))
;;;

(start m)
;;;

(list-stmt m from '(?x nm:isVersionOf ?y))
;;;