(load "note/p2d.rulp")
;=>nil

(add-stmt p2d '(nt:ta1 nm:hasFieldTag nt:f1))
(add-stmt p2d '(nt:ta1 nm:beParentTagOf nt:c1))

(add-stmt p2d '(nt:ta2 nm:hasFieldTag nt:f2-xx))
(add-stmt p2d '(nt:ta2 nm:beParentTagOf nt:c2))

(add-stmt p2d '(nt:ta3 nm:hasFieldTag nt:f3))
(add-stmt p2d '(nt:ta3 nm:beParentTagOf nt:c3))
(add-stmt p2d '(nt:c3-f3 nm:typeOf nm:tag))

(add-stmt p2d '(nt:ta4 nm:hasFieldTag nt:f4-xx))
(add-stmt p2d '(nt:ta4 nm:beParentTagOf nt:c4))
(add-stmt p2d '(nt:c4-xx nm:typeOf nm:tag))
;=>true true true true true true true true true true

(start p2d)
;=>627

(state-of p2d)
;=>completed

(list-with-state (list-rule p2d) failed)
;=>'()

(list-stmt p2d from '(?x nm:hasSubCollection ?y))
;=>'('(nt:f3 nm:hasSubCollection nt:c3-f3) '(nt:f4-xx nm:hasSubCollection nt:c4-xx))

(list-stmt p2d from '(?x nm:beFieldTagOf ?y))
;=>'('(nt:f1 nm:beFieldTagOf nt:ta1) '(nt:f2-xx nm:beFieldTagOf nt:ta2) '(nt:f3 nm:beFieldTagOf nt:ta3) '(nt:f4-xx nm:beFieldTagOf nt:ta4) '(nt:c3-f3 nm:beFieldTagOf nt:c3) '(nt:c4-xx nm:beFieldTagOf nt:c4))

