(load "note/p2d.rulp")
;=>nil

(add-stmt p2d '(ta1 nm:hasFieldTag f1))
(add-stmt p2d '(ta1 nm:beParentTagOf c1))
(add-stmt p2d '(ta2 nm:hasFieldTag f2-xx))
(add-stmt p2d '(ta2 nm:beParentTagOf c2))
(add-stmt p2d '(ta3 nm:hasFieldTag f3))
(add-stmt p2d '(ta3 nm:beParentTagOf c3))
(add-stmt p2d '(c3-f3 nm:typeOf nm:tag))
(add-stmt p2d '(ta4 nm:hasFieldTag f4-xx))
(add-stmt p2d '(ta4 nm:beParentTagOf c4))
(add-stmt p2d '(c4-xx nm:typeOf nm:tag))
;=>true true true true true true true true true true

(start p2d)
;=>490

(state-of p2d)
;=>completed

(list-with-state (list-rule p2d) failed)
;=>'()

(list-stmt p2d from '(?x nm:hasSubCollection ?y))
;=>'('(f3 nm:hasSubCollection c3-f3) '(f4-xx nm:hasSubCollection c4-xx))

(list-stmt p2d from '(?x nm:beFieldTagOf ?y))
;=>'('(f1 nm:beFieldTagOf ta1) '(f2-xx nm:beFieldTagOf ta2) '(f3 nm:beFieldTagOf ta3) '(f4-xx nm:beFieldTagOf ta4) '(c3-f3 nm:beFieldTagOf c3) '(c4-xx nm:beFieldTagOf c4))

