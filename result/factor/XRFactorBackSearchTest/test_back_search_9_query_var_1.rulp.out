(new model m)
(add-rule m if '(?x p1 ?y) do (-> m '(?x p2 ?y)))
(add-stmt m '(a p1 b1))
(add-stmt m '(x p1 y1))
(add-stmt m '(x p1 y2))
(add-stmt m '(a p1 b2))
(add-stmt m '(a p1 b3))
;=>m RU000 true true true true true

(setq ?bs-trace true)
;=>&?bs-trace

(dump-status m (+ ?script-path ".status.1.txt"))
;=>nil

(back-search m '(a p2 ?x) explain)
;=>'()
;out:
00000 SO0000: create_root, stmt='(a p2 ?x), type=STMT_OR, status=INIT
00000 SO0000: init begin, stmt='(a p2 ?x), type=STMT_OR, status=INIT
00000 SO0000: has stmt, stmt='(a p2 ?x), rst=false
00000 SO0000: add child, type=STMT_AND, name=SA0001
00000 SO0000: init end, rst=false, status=PROCESS, succ-child=null, needComplete=true
00000 SO0000: route to SA0001
00001     SA0001: init begin, stmt='(a p2 ?x), rule=RU000: RU000, action='(?0, p2, ?2)(0), type=STMT_AND, status=INIT
00001     SA0001: invalid queryStmtList: ['(a p1 ?x)]
00001     SA0001: init end, rst=false, status=COMPLETE, fail-child=null
00002     SA0001: route to SO0000
00003 SO0000: process begin
00003 SO0000: process end, rst=false, status=COMPLETE, child=1/1, succ-child=null, needComplete=true
00004 SO0000: has stmt, stmt='(a p2 ?x), rst=false
00004 SO0000: return false

;eof

(dump-status m (+ ?script-path ".status.2.txt"))
;=>nil

(list-stmt m)
;=>'('(a p1 b1) '(x p1 y1) '(x p1 y2) '(a p1 b2) '(a p1 b3))

