(new model m)
(add-rule m if '(?a p ?b) '(?b p ?c) do (-> m '(?a p ?c)))
(add-stmt m '(a p b))
(add-stmt m '(b p c))
;=>m RU000 true true

(setq ?bs-trace true)
;=>&?bs-trace

(back-search m '(a p c) explain)
;=>'('(a p c) ("RU000" '('(a p ?b) '(?b p c))))
;out:
00000 SO0000: create_root, stmt='(a p c), type=STMT_OR, status=INIT
00000 SO0000: init begin, stmt='(a p c), type=STMT_OR, status=INIT
00000 SO0000: has stmt, stmt='(a p c), rst=false
00000 SO0000: add child, type=STMT_AND, name=SA0001
00000 SO0000: init end, rst=false, status=PROCESS, succ-child=null, needComplete=true
00000 SO0000: route to SA0001
00001     SA0001: init begin, stmt='(a p c), rule=RU000: RU000, action='(?0, p, ?2)(0), type=STMT_AND, status=INIT
00001     SA0001: add child, type=STMT_QUERY, name=SQ0002
00001     SA0001: init end, rst=false, status=PROCESS, fail-child=null
00001     SA0001: route to SQ0002
00002         SQ0002: init begin, tree='('(a p ?b) '(?b p c)), type=STMT_QUERY, status=INIT
00002         SQ0002: init end, rst=false, status=PROCESS, forward=false, backward=false, query=0
00003         SQ0002: process begin
00003         SQ0002: process end, rst=true, status=COMPLETE, forward=true, backward=false, query=1
00004         SQ0002: route to SA0001
00005     SA0001: process begin
00005     SA0001: process end, rst=true, status=COMPLETE, child=1/1, fail-child=null
00006     SA0001: complete begin
00006     SA0001: has stmt, stmt='(a p c), rst=true
00006     SA0001: complete end, rst=true
00006     SA0001: route to SO0000
00007 SO0000: process begin
00007 SO0000: process end, rst=true, status=COMPLETE, child=1/1, succ-child=SA0001, needComplete=true
00008 SO0000: has stmt, stmt='(a p c), rst=true
00008 SO0000: return true

;eof

(list-stmt m)
;=>'('(a p b) '(b p c) '(a p c))

