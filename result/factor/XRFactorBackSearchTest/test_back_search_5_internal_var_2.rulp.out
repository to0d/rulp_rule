(new model m)
(add-rule m if '(?a p2 ?b) do (-> m '(?a p ?b)))
(add-rule m if '(?a p ?b) '(?b p ?c) do (-> m '(?a p ?c)))
(add-stmt m '(a p2 b))
(add-stmt m '(b p2 c))
(add-stmt m '(a p2 b2))
(add-stmt m '(b2 p2 c))
;=>m RU000 RU001 true true true true

(setq ?bs-trace true)
;=>&?bs-trace

(back-search m '(a p c) explain)
;=>'('(a p c) ("RU001" '('(a p ?b) '(?b p c))))
;out:
00000 SO0000: create_root, stmt='(a p c), type=STMT_OR, status=INIT
00000 SO0000: init begin, stmt='(a p c), type=STMT_OR, status=INIT
00000 SO0000: has stmt, stmt='(a p c), rst=false
00000 SO0000: add child, type=STMT_AND, name=SA0001
00000 SO0000: add child, type=STMT_AND, name=SA0002
00000 SO0000: init end, rst=false, status=PROCESS, succ-child=null, needComplete=true
00000 SO0000: route to SA0001
00001     SA0001: init begin, stmt='(a p c), rule=RU000: RU000, action='(?0, p, ?2)(0), type=STMT_AND, status=INIT
00001     SA0001: add child, type=STMT_OR, name=SO0003
00001     SA0001: init end, rst=false, status=PROCESS, fail-child=null
00001     SA0001: route to SO0003
00002         SO0003: init begin, stmt='(a p2 c), type=STMT_OR, status=INIT
00002         SO0003: has stmt, stmt='(a p2 c), rst=false
00002         SO0003: not child, return false
00002         SO0003: init end, rst=false, status=COMPLETE, succ-child=null, needComplete=true
00003         SO0003: route to SA0001
00004     SA0001: process begin
00004     SA0001: process end, rst=false, status=COMPLETE, child=1/1, fail-child=SO0003
00005     SA0001: route to SO0000
00006 SO0000: process begin
00006 SO0000: process end, rst=false, status=PROCESS, child=1/2, succ-child=null, needComplete=true
00006 SO0000: route to SA0002
00007     SA0002: init begin, stmt='(a p c), rule=RU001: RU001, action='(?0, p, ?2)(0), type=STMT_AND, status=INIT
00007     SA0002: add child, type=STMT_QUERY, name=SQ0004
00007     SA0002: init end, rst=false, status=PROCESS, fail-child=null
00007     SA0002: route to SQ0004
00008         SQ0004: init begin, tree='('(a p ?b) '(?b p c)), type=STMT_QUERY, status=INIT
00008         SQ0004: init end, rst=false, status=PROCESS, forward=false, backward=false, query=0
00009         SQ0004: process begin
00009         SQ0004: process end, rst=true, status=COMPLETE, forward=true, backward=true, query=2
00010         SQ0004: route to SA0002
00011     SA0002: process begin
00011     SA0002: process end, rst=true, status=COMPLETE, child=1/1, fail-child=null
00012     SA0002: complete begin
00012     SA0002: execute rule: RU001, rc=4
00012     SA0002: has stmt, stmt='(a p c), rst=true
00012     SA0002: complete end, rst=true
00012     SA0002: route to SO0000
00013 SO0000: process begin
00013 SO0000: process end, rst=true, status=COMPLETE, child=2/2, succ-child=SA0002, needComplete=true
00014 SO0000: has stmt, stmt='(a p c), rst=true
00014 SO0000: return true

;eof

(defvar ?tree (make-ref-tree m '(a p c)))
;=>&?tree

?tree
;=>'('(a p c) (RU001 '('(a p b) (RU000 '('(a p2 b) defined))) '('(b p c) (RU000 '('(b p2 c) defined)))))

(print-ref-tree ?tree)
;=>nil
;out:
'(a p c)
`-RU001 (expr)
  |-'(a p b)
  | `-RU000 (expr)
  |   `-'(a p2 b)
  |     `-defined
  `-'(b p c)
    `-RU000 (expr)
      `-'(b p2 c)
        `-defined

;eof

(list-stmt m)
;=>'('(a p2 b) '(b p2 c) '(a p2 b2) '(b2 p2 c) '(a p b) '(b p c) '(a p b2) '(b2 p c) '(a p c))

