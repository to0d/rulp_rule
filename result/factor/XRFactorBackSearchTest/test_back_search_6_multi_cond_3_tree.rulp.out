(new model m)
(add-rule m if '(?a p ?b) '(?b p ?c) do (-> m '(?a p ?c)))
(add-stmt m '(a p b))
(add-stmt m '(b p c))
;=>m RU000 true true

(setq ?bs-trace true)
;=>&?bs-trace

(back-search m (or (and '(a p b) '(a p d)) '(a p c)) explain)
;=>'('(a p c))
;out:
00000 LO0000: create_root, stmt-list=[(and '(a p b) '(a p d)), '(a p c)], type=LOGIC_OR, status=INIT
00000 LO0000: init begin, stmt-list=[(and '(a p b) '(a p d)), '(a p c)], type=LOGIC_OR, status=INIT
00000 LO0000: add child, type=LOGIC_AND, name=LA0001
00000 LO0000: add child, type=STMT_OR, name=SO0002
00000 LO0000: init end, rst=false, status=PROCESS, succ-child=null
00000 LO0000: route to LA0001
00001     LA0001: init begin, stmt-list=['(a p b), '(a p d)], type=LOGIC_AND, status=INIT
00001     LA0001: add child, type=STMT_OR, name=SO0003
00001     LA0001: add child, type=STMT_OR, name=SO0004
00001     LA0001: init end, rst=false, status=PROCESS, fail-child=null
00001     LA0001: route to SO0003
00002         SO0003: init begin, stmt='(a p b), type=STMT_OR, status=INIT
00002         SO0003: has stmt, stmt='(a p b), rst=true
00002         SO0003: init end, rst=true, status=COMPLETE, succ-child=null, needComplete=false
00003         SO0003: route to LA0001
00004     LA0001: process begin
00004     LA0001: process end, rst=false, status=PROCESS, child=1/2, fail-child=null
00004     LA0001: route to SO0004
00005         SO0004: init begin, stmt='(a p d), type=STMT_OR, status=INIT
00005         SO0004: has stmt, stmt='(a p d), rst=false
00005         SO0004: add child, type=STMT_AND, name=SA0005
00005         SO0004: init end, rst=false, status=PROCESS, succ-child=null, needComplete=true
00005         SO0004: route to SA0005
00006             SA0005: init begin, stmt='(a p d), rule=RU000: RU000, action='(?0, p, ?2)(0), type=STMT_AND, status=INIT
00006             SA0005: add child, type=STMT_QUERY, name=SQ0006
00006             SA0005: init end, rst=false, status=PROCESS, fail-child=null
00006             SA0005: route to SQ0006
00007                 SQ0006: init begin, tree='('(a p ?b) '(?b p d)), type=STMT_QUERY, status=INIT
00007                 SQ0006: init end, rst=false, status=PROCESS, forward=false, backward=false, query=0
00008                 SQ0006: process begin
00008                 SQ0006: process end, rst=false, status=COMPLETE, forward=true, backward=true, query=0
00009                 SQ0006: route to SA0005
00010             SA0005: process begin
00010             SA0005: process end, rst=false, status=COMPLETE, child=1/1, fail-child=SQ0006
00011             SA0005: route to SO0004
00012         SO0004: process begin
00012         SO0004: process end, rst=false, status=COMPLETE, child=1/1, succ-child=null, needComplete=true
00013         SO0004: route to LA0001
00014     LA0001: process begin
00014     LA0001: process end, rst=false, status=COMPLETE, child=2/2, fail-child=SO0004
00015     LA0001: route to LO0000
00016 LO0000: process begin
00016 LO0000: process end, rst=false, status=PROCESS, child=1/2, succ-child=null
00016 LO0000: route to SO0002
00017     SO0002: init begin, stmt='(a p c), type=STMT_OR, status=INIT
00017     SO0002: has stmt, stmt='(a p c), rst=true
00017     SO0002: init end, rst=true, status=COMPLETE, succ-child=null, needComplete=false
00018     SO0002: route to LO0000
00019 LO0000: process begin
00019 LO0000: process end, rst=true, status=COMPLETE, child=2/2, succ-child=SO0002
00020 LO0000: return true

;eof

(list-stmt m)
;=>'('(a p b) '(b p c) '(a p c))

