(new model m)
;=>

(add-rule m if '(?x ?y ?z) do (-> m '(?y ?z ?x)))
(add-rule m if '(?x a ?y) do (-> m '(?y a ?x)))
;=>

(add-stmt m '(a b c))
;=>

(start m)
;=>

(list-stmt m)
;=>

(do
    (defvar ?tree (make-ref-tree m '(c b a)))
    (println ?tree)
    (print-ref-tree ?tree)
)
;=>

(do
    (defvar ?tree (make-ref-tree m '(c b a) -1 0))
    (println ?tree)
    (print-ref-tree ?tree)
)
;=>

(do
    (defvar ?tree (make-ref-tree m '(c b a) -1 1))
    (println ?tree)
    (print-ref-tree ?tree)
)
;=>

(do
    (defvar ?tree (make-ref-tree m '(c b a) 0 -1))
    (println ?tree)
    (print-ref-tree ?tree)
)
;=>

(do
    (defvar ?tree (make-ref-tree m '(c b a) 1 -1))
    (println ?tree)
    (print-ref-tree ?tree)
)
;=>
