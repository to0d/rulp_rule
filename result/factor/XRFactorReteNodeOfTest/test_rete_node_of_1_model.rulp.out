(new model m)
;=>m

(add-rule "R1" m if '(?a p1 ?b) do (if (equal ?a ?b) (throw err-r1)) (-> (?b p1 ?a)))
;=>R1

(add-stmt m '(a p1 a))
;=>true

(add-stmt m n1:'(abc))
;=>true

(rete-node-of m)
;=>'('(?0 ?1 ?2) n1:'(?0) '(?0 p1 ?1) R1)

(rete-node-of m RRT_ROOT)
;=>'('(?0 ?1 ?2))

(rete-node-of m RRT_NAME)
;=>'(n1:'(?0))

(rete-node-of m RRT_RULE)
;=>'(R1)

(foreach (?n (rete-node-of m)) (return (name-of $(value-of ?n))))
;=>'("root3" "n1" "A0002" "R1")

(foreach (?n (rete-node-of m)) (return (attribute-of $(value-of ?n))))
;=>'('('(entry-len 3) '(rete-type 0)) '('(entry-len 1) '(rete-type 1)) '('(entry-len 3) '(rete-type 4)) '('(entry-len 3) '(rete-type 15)))

(foreach (?n (rete-node-of m)) (return (rete-type-of ?n)))
;=>'(0 1 4 15)

(foreach (?n (rete-node-of m)) (return (entry-length-of ?n)))
;=>'(3 1 3 3)

(foreach (?n (rete-node-of m)) 
    (return 
        (foreach (?s RRS_ALL_STATUS) 
            (return (rete-entry-count-of ?n ?s)))))
;=>'('(1 0 0 0 0 0) '(1 0 0 0 0 0) '(0 0 0 0 0 0) '(0 0 0 0 0 0))

(foreach (?n (rete-node-of m)) (return (rete-valid-entry-of ?n)))
;=>'(1 1 0 0)

