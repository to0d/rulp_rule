(new model m)
;;;

(add-node m name1:'(3))
(add-node m name2:'(3))
(add-node m name3:'(3))
(add-node m name4:'(3))
(add-node m name5:'(3))
(add-node m name6:'(3))
;=>

(add-constraint m name1:'(?x ?y ?z) (type int on ?x))
;=>

(add-constraint m name1:'(? ?y ?) (type long on ?y))
;=>

(add-constraint m name1:'(? ? ?z) (type float on ?z))
;=>

(add-constraint m name2:'(? ?y ?) (type double on ?y))
;=>

(add-constraint m name3:'(? ?y ?) (type bool on ?y))
;=>

(add-constraint m name4:'(? ?y ?) (type atom on ?y))
;=>

(add-constraint m name4:'(? ? ?z) (type string on ?z))
;=>

(add-constraint m name5:'(?...) (type string on ?2))
;=>

(add-constraint m name5:'(?x ?y ?z) (uniq on '(?x ?y)))
;=>

(add-constraint m name6:'(?x ?y ?z) (!= ?x nil))
;=>

(add-constraint m name6:'(?x ?y ?z) (!= 1 ?z))
;=>

(add-constraint m name6:'(?x ?y ?z) (!= ?z ?y))
;=>

(add-constraint m name6:'(?x ?y ?z) (> ?y 5))
;=>

(add-constraint m name6:'(?x ?y ?) (< ?x 10))
;=>

(add-constraint m name7:'(?x ?y ?z) (type int on ?x))
;=>

(add-constraint m name8:'(?x ?y) (max 5 on ?x))
;=>

(add-constraint m name8:'(?x ?y) (min 5 on ?y))
;=>

(add-constraint m name8:'(?x ?y) (not-nil on ?x))
;=>

(add-constraint m name9:'(?x ?y) (one-of '(a b c) on ?x))
;=>

(add-constraint m name10:'(?x ?y) (single))
;=>


(defun c1 (?stmt)
    (return (> (get ?stmt 0) (get ?stmt 1)))
)
;=>

(add-constraint m name11:'(?x ?y ?z) (c1))
;=>

(add-constraint m name12:'(?x ?y) (order by ?x))
;=>

(add-constraint m name13:'(?x ?y) (order by ?x asc))
;=>

(add-constraint m name14:'(?x ?y) (order by ?x desc))
;=>