(new model m)
(add-rule m if '(?a p ?b) '(?b p ?c) do (-> m '(?a p ?c)))
(add-stmt m '(a p b))
(add-stmt m '(b p c))
;=>m RU000 true true

(setq ?bs-trace true)
;=>&?bs-trace

(back-search m (and '(a p c) '(a p b)) explain)
;=>(and '('(a p c) ("RU000" (query-stmt '(a p b) '(b p c)))) '('(a p b)))
;out:
00000 LA0000: create_root, stmt-list=['(a p c), '(a p b)], type=LOGIC_AND, status=INIT
00000 LA0000: init begin, stmt-list=['(a p c), '(a p b)], type=LOGIC_AND, status=INIT
00000 LA0000: add child, type=STMT_OR, name=SO0001
00000 LA0000: add child, type=STMT_OR, name=SO0002
00000 LA0000: init end, rst=false, status=PROCESS, fail-child=null
00000 LA0000: route to SO0001
00001     SO0001: init begin, stmt='(a p c), type=STMT_OR, status=INIT
00001     SO0001: has stmt, stmt='(a p c), rst=false
00001     SO0001: add child, type=STMT_AND, name=SA0003
00001     SO0001: init end, rst=false, status=PROCESS, succ-child=null, needComplete=true
00001     SO0001: route to SA0003
00002         SA0003: init begin, stmt='(a p c), rule=RU000: RU000, action='(?0, p, ?2)(0), type=STMT_AND, status=INIT
00002         SA0003: add child, type=ENTRY_QUERY, name=EQ0004
00002         SA0003: init end, rst=false, status=PROCESS, fail-child=null
00002         SA0003: route to EQ0004
00003             EQ0004: init begin, tree='('(a p ?b) '(?b p c)), type=ENTRY_QUERY, status=INIT
00003             EQ0004: init end, rst=false, status=PROCESS, size=0
00004             EQ0004: process begin
00004             EQ0004: process end, rst=true, status=COMPLETE, size=0
00005             EQ0004: route to SA0003
00006         SA0003: process begin
00006         SA0003: process end, rst=true, status=COMPLETE, child=1/1, fail-child=null
00007         SA0003: complete begin
00007         SA0003: query: iterator=[0], result=['(a p b), '(b p c)]
00007         SA0003: execute rule: RU000, stmt=['(a p b), '(b p c)], rc=4
00007         SA0003: has stmt, stmt='(a p c), rst=true
00007         SA0003: complete end, rst=true
00007         SA0003: route to SO0001
00008     SO0001: process begin
00008     SO0001: process end, rst=true, status=COMPLETE, child=1/1, succ-child=SA0003, needComplete=true
00009     SO0001: complete begin
00009     SO0001: has stmt, stmt='(a p c), rst=true
00009     SO0001: complete end, rst=true
00009     SO0001: route to LA0000
00010 LA0000: process begin
00010 LA0000: process end, rst=false, status=PROCESS, child=1/2, fail-child=null
00010 LA0000: route to SO0002
00011     SO0002: init begin, stmt='(a p b), type=STMT_OR, status=INIT
00011     SO0002: has stmt, stmt='(a p b), rst=true
00011     SO0002: init end, rst=true, status=COMPLETE, succ-child=null, needComplete=false
00012     SO0002: route to LA0000
00013 LA0000: process begin
00013 LA0000: process end, rst=true, status=COMPLETE, child=2/2, fail-child=null
00014 LA0000: return true

;eof

(list-stmt m)
;=>'('(a p b) '(b p c) '(a p c))

