(new model m)
(add-rule m if '(?a p2 ?b) do (-> m '(?a p ?b)))
(add-rule m if '(?a p ?b) '(?b p ?c) do (-> m n2:'(?b)))
(add-stmt m '(a p2 b))
(add-stmt m '(b p2 c))
(add-stmt m '(a p2 b2))
(add-stmt m '(b2 p2 c))
;=>m RU000 RU001 true true true true

(setq ?bs-trace true)
;=>&?bs-trace

(do
    (defvar ?tree (back-search m n2:'(b) explain))
    (println ?tree)
    (print-ref-tree ?tree)
)
;=>nil
;out:
00000 SO0000: create_root, stmt=n2:'(b), type=STMT_OR, status=INIT
00000 SO0000: init begin, stmt=n2:'(b), type=STMT_OR, status=INIT
00000 SO0000: has stmt, stmt=n2:'(b), rst=false
00000 SO0000: add child, type=STMT_AND, name=SA0001
00000 SO0000: init end, rst=false, status=PROCESS, succ-child=null, needComplete=true
00000 SO0000: route to SA0001
00001     SA0001: init begin, stmt=n2:'(b), rule=RU001: RU001, action=n2:'(?1)(0), type=STMT_AND, status=INIT
00001     SA0001: add child, type=ENTRY_QUERY, name=EQ0002
00001     SA0001: init end, rst=false, status=PROCESS, fail-child=null
00001     SA0001: route to EQ0002
00002         EQ0002: init begin, tree='('(?a p b) '(b p ?c)), type=ENTRY_QUERY, status=INIT
00002         EQ0002: init end, rst=false, status=PROCESS, forward=false, backward=false, query=0
00003         EQ0002: process begin
00003         EQ0002: process end, rst=true, status=COMPLETE, forward=true, backward=true, query=1
00004         EQ0002: route to SA0001
00005     SA0001: process begin
00005     SA0001: process end, rst=true, status=COMPLETE, child=1/1, fail-child=null
00006     SA0001: complete begin
00006     SA0001: execute rule: RU001, rc=4
00006     SA0001: has stmt, stmt=n2:'(b), rst=true
00006     SA0001: complete end, rst=true
00006     SA0001: route to SO0000
00007 SO0000: process begin
00007 SO0000: process end, rst=true, status=COMPLETE, child=1/1, succ-child=SA0001, needComplete=true
00008 SO0000: has stmt, stmt=n2:'(b), rst=true
00008 SO0000: return true
'(n2:'(b) (RU001 (query-stmt '(a p b) '(b p c))))
n2:'(b)
`-"RU001" (expr)
  `-query-stmt (expr)
    |-'(a p b)
    `-'(b p c)

;eof

(do
    (defvar ?tree (make-ref-tree m n2:'(b)))
    (println ?tree)
    (print-ref-tree ?tree)
)
;=>nil
;out:
'(n2:'(b) (RU001 '('(a p b) (RU000 '('(a p2 b) defined))) '('(b p c) (RU000 '('(b p2 c) defined)))))
n2:'(b)
`-RU001 (expr)
  |-'(a p b)
  | `-RU000 (expr)
  |   `-'(a p2 b)
  |     `-defined
  `-'(b p c)
    `-RU000 (expr)
      `-'(b p2 c)
        `-defined

;eof

(list-stmt m)
;=>'('(a p2 b) '(b p2 c) '(a p2 b2) '(b2 p2 c) '(a p b) '(b p c) '(a p b2) '(b2 p c) n2:'(b) n2:'(b2))

