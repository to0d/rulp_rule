;;------------------------------------------------------------------
;; Model
;;------------------------------------------------------------------
(new model p2d)

(defvar #ns_tag "nt:")
(defvar #ns_domain "nd:")

(defun get-uri-name (?t)
    (let
        (?name (to-string ?t))
        (let
            (?pos (str-index-of ?name ":"))
            (if
                (equal ?pos -1)
                (return ?name)
                (return (str-substr ?name (+ ?pos 1) (length-of ?name)))
            )
        )
    )
)

(defun get-field-name (?t)
    (let
        (?name (to-string ?t))
        (let
            (?pos (str-last-index-of ?name "-"))
            (if
                (equal ?pos -1)
                (return ?name)
                (return (str-substr ?name (+ ?pos 1) (length-of ?name)))
            )
        )
    )
)

(defmacro get-new-ns (?obj ?ns)
    (to-atom (strcat ?ns (get-uri-name ?obj)))
)

;;------------------------------------------------------------------
;; Basic Rules
;;------------------------------------------------------------------
(add-stmt p2d '(nm:inverseProperty nm:propertyOf nm:symmetricProperty))


;;------------------------------------------------------------------
;; Tag Rules
;;------------------------------------------------------------------

(add-stmt p2d '(nm:beParentTagOf nm:inverseSimpleTagProperty nm:beChildTagOf))
(add-stmt p2d '(nm:hasDescendant nm:inverseSimpleTagProperty nm:hasAncestors))
(add-stmt p2d '(nm:hasAliasTag nm:inverseSimpleTagProperty nm:beAliasTo))
(add-stmt p2d '(nm:beDefinedByTag nm:inverseSimpleTagProperty nm:defineTag))
(add-stmt p2d '(nm:beBaseOn nm:inverseSimpleTagProperty nm:beImplementedIn))
(add-stmt p2d '(nm:hasVersion nm:inverseSimpleTagProperty nm:isVersionOf))
(add-stmt p2d '(nm:hasPartTag nm:inverseSimpleTagProperty nm:bePartTagOf))

(add-stmt p2d '(nm:beAliasTo nm:propertyOf nm:singlePropery))

(add-stmt p2d '(nm:hasRelatedTag nm:propertyOf nm:tagRelation))
(add-stmt p2d '(nm:hasRelatedTag nm:propertyOf nm:symmetricProperty))

(add-stmt p2d '(nm:hasAutoRelatedTag nm:propertyOf nm:tagRelation))
(add-stmt p2d '(nm:hasAutoRelatedTag nm:propertyOf nm:symmetricProperty))

(add-stmt p2d '(nm:beSimilarTo nm:propertyOf nm:tagRelation))
(add-stmt p2d '(nm:beSimilarTo nm:propertyOf nm:symmetricProperty))

(add-stmt p2d '(nm:term nm:typeOf nm:tagAttr))
(add-stmt p2d '(nm:commonTag nm:typeOf nm:tagAttr))
(add-stmt p2d '(nm:itemTag nm:typeOf nm:tagAttr))
(add-stmt p2d '(nm:autoTag nm:typeOf nm:tagAttr))
(add-stmt p2d '(nm:groupTag nm:typeOf nm:tagAttr))
(add-stmt p2d '(nm:hotTag nm:typeOf nm:tagAttr))

(add-stmt p2d '(nm:hasTagAttr nm:propertyOf nm:tagProperty))


;;------------------------------------------------------------------
;; Rules for TagClass 
;;------------------------------------------------------------------
(add-stmt p2d '(nm:beInstanceTagOf nm:inverseSimpleTagProperty nm:beClassTagOf))
(add-stmt p2d '(nm:beFieldTagOf nm:inverseSimpleTagProperty nm:hasFieldTag))
(add-rule "TC1" p2d
    if 
        '(?ti nm:beInstanceTagOf ?tc)
    do
        (-> '(?tc nm:beDefinedByTag nt:$TClass))
)

;;------------------------------------------------------------------
;; Rules for Collection 
;;------------------------------------------------------------------
(add-stmt
    p2d
    '(nm:isSubCollectionOf nm:inverseSimpleTagProperty nm:hasSubCollection)
)

(add-rule "CC1" p2d
    if
        '(?a nm:hasSubCollection ?b)
        '(?b nm:beParentTagOf ?c)
    do
        (-> '(?a nm:beParentTagOf ?c))
        (-> '(?a nm:beDefinedByTag nt:$TCollection))
)

;;------------------------------------------------------------------
;; Rules for TagGroup 
;;------------------------------------------------------------------
(add-stmt p2d '(nm:hasGroupChild nm:inverseSimpleTagProperty nm:hasGroupParent))
(add-rule "TG1" p2d
    if
        '(?c nm:beParentTagOf ?cc)
    do
        (-> '(?c nm:hasGroupChild ?cc))
)

;;#[TG2: (?c1 nm:hasGroupParent ?p), (?c2 nm:hasGroupParent ?p), notEqual(?c1 ?c2) -> (?c1 nm:hasAutoRelatedTag ?c2)]

(add-rule "TG3" p2d
    if
        '(?x nm:hasGroupParent ?p)
    do
        (-> '(nt:$TGROUP nm:hasRelatedTag ?p))
)


;;------------------------------------------------------------------
;; Common Rules
;;------------------------------------------------------------------
(add-rule "C1" p2d
    if
        '(?p1 nm:inverseProperty ?p2)
        '(?t1 ?p1 ?t2)
    do
        (-> '(?t2 ?p2 ?t1))
)

(add-rule "C2" p2d
    if
        '(?a ?p ?a)
        '(?p nm:propertyOf nm:nonSelfDefine)
    do
        (print "a=" ?a ", p=" ?p "\n")
        (error p2d-conflict ?0)
)

(add-rule "C3" p2d
    if
        '(?a ?p ?b)
        '(?p nm:propertyOf nm:tagProperty)
    do
        (-> '(?a nm:typeOf nm:tag))
)

(add-rule "C4" p2d
    if
        '(?a ?p ?b)
        '(?a ?p ?c)
        '(?p nm:propertyOf nm:singlePropery)
        (not (equal ?b ?c))
    do
        (error p2d-conflict '(?0 ?1))
)

(add-rule "C5" p2d
    if
        '(?a ?p ?b)
        '(?p nm:propertyOf nm:symmetricProperty)
    do
        (-> '(?b ?p ?a))
)

(add-rule "C6" p2d
    if
        '(?a nm:typeOf ?c1)
        '(?c1 nm:classOf ?c2)
    do
        (-> '(?a nm:typeOf ?c2))
)

(add-rule "C7" p2d
    if
        (var-changed ?model-state running completed)
        '(?p nm:propertyOf nm:nonCircleProperty)
        '(?a ?p ?b)
        (not (equal ?a ?b))
    do
        (if 
            (has-stmt p2d '(?b ?p ?a))
            (error '("Circle found" '(?a ?p ?b) '(?b ?p ?a)))
        )
)

;;------------------------------------------------------------------
;; Tag Relation Rules
;;------------------------------------------------------------------
(add-rule "T1" p2d
    if
        '(?a nm:beAliasTo ?b)
        '(?b nm:beAliasTo ?c)
    do
        (error p2d-conflict '("Can't alias to alias tag" ?0 1))
)
(add-rule "T2" p2d
    if
        '(?a nm:beAliasTo ?b)
        '(?a ?p ?c)
        (not (equal nm:beAliasTo ?p))
        (not (equal nm:hasAliasTag ?p))
    do
        (-> '(?b ?p ?c))
)

(add-rule "T3" p2d
    if
        '(?a nm:beAliasTo ?b)
        '(?c ?p ?a)
        (not (equal nm:beAliasTo ?p))
        (not (equal nm:hasAliasTag ?p))
    do
        (-> '(?c ?p ?b))
)

(add-rule "T4" p2d
    if
        '(?p nm:propertyOf nm:tagRelation)
    do
        (-> '(?p nm:propertyOf nm:tagProperty))
)

(add-rule "T5" p2d
    if
        '(?p1 nm:propertyOf nm:tagRelation)
        '(?p1 nm:inverseProperty ?p2)
    do
        (-> '(?p2 nm:propertyOf nm:tagRelation))
)


(add-rule "T8" p2d
    if
        '(?p1 nm:inverseSimpleTagProperty ?p2)
    do
        (->
            '(?p1 nm:propertyOf nm:nonSelfDefine)
            '(?p2 nm:propertyOf nm:nonSelfDefine)
            '(?p1 nm:propertyOf nm:nonCircleProperty)
            '(?p2 nm:propertyOf nm:nonCircleProperty)
            '(?p1 nm:propertyOf nm:tagRelation)
            '(?p2 nm:propertyOf nm:tagRelation)
            '(?p1 nm:inverseProperty ?p2)
        )
)

;;------------------------------------------------------------------
;; Tag Attr Rules
;;------------------------------------------------------------------
;; #[TA1: (?a nm:typeOf nm:tag), (?a nm:hasTagAttr nm:term), (?a nm:hasTagAttr nm:topic) -> conflict("A tag can't has term attr and topic attr at same time", 0,1) ]
;; #[TA3: (?a nm:typeOf nm:tag), (?a nm:beParentTagOf ?b) -> incChildTagCount()]
(add-rule "TA5" p2d
    if
        '(?a nm:hasTagAttr ?t)
        '(?a nm:typeOf nm:tagAttr)
    do
        (-> '(?a nm:typeOf nm:tag))
)

;;------------------------------------------------------------------
;; Domain Rules
;;------------------------------------------------------------------
(add-stmt p2d '(nm:beParentDomainOf nm:inverseSimpleDomainProperty nm:beChildDomainOf))
(add-stmt p2d '(nm:beAncestorDomainOf nm:inverseSimpleDomainProperty nm:beDescendantDomainOf))

(add-rule "D1" p2d
    if
        '(?p1 nm:inverseSimpleDomainProperty ?p2)
    do
        (->
            '(?p1 nm:propertyOf nm:nonSelfDefine)
            '(?p2 nm:propertyOf nm:nonSelfDefine)
            '(?p1 nm:propertyOf nm:nonCircleProperty)
            '(?p2 nm:propertyOf nm:nonCircleProperty)
            '(?p1 nm:propertyOf nm:domainRelation)
            '(?p2 nm:propertyOf nm:domainRelation)
            '(?p1 nm:inverseProperty ?p2)
        )
)

(add-rule "D2" p2d
    if
        '(?a nm:beParentDomainOf ?b)
    do
        (-> '(?a nm:beAncestorDomainOf ?b))
)

(add-rule "D3" p2d
    if
        '(?a nm:beAncestorDomainOf ?b)
        '(?b nm:beAncestorDomainOf ?c)
    do
        (-> '(?a nm:beAncestorDomainOf ?c))
)

(add-rule "D4" p2d
    if
        '(?da nm:beAncestorDomainOf ?db)
        '(?db nm:hasTag ?t)
    do
        (-> '(?da nm:hasTag ?t))
)

(add-rule "D5" p2d
    if
        '(?t nm:typeOf nm:tag)
    do
        (-> '(nd:Global nm:hasTag ?t))
)

(add-rule "DC1" p2d
    if
        (var-changed ?model-state running completed)
        '(?d nm:typeOf nm:domain)
        (not (equal ?d nd:Global))
    do
        (if
            (not
                (has-stmt p2d '(?x nm:beParentDomainOf ?d))
            )
            (-> p2d '(nd:Global nm:beParentDomainOf ?d))
        )
)


;; ------------------------------------------------------------------
;;  Remove unnecessary related tags
;; ------------------------------------------------------------------
(add-rule "RR1" p2d
    if
        '(?a nm:beParentTagOf ?b)
    do
        (-> '(?a nm:hasDescendant ?b))
)

(add-rule "RR2" p2d
    if
        '(?a nm:hasDescendant ?b)
        '(?b nm:hasDescendant ?c)
    do
        (-> '(?a nm:hasDescendant ?c))
)

(add-rule "RR3" p2d
    if
        '(?a nm:hasRelatedTag ?b)
        '(?a nm:hasDescendant ?b)
    do
        (remove-stmt ?0)
)

(add-rule "RR4" p2d
    if
        '(?a nm:hasRelatedTag ?b)
        '(?a nm:hasAncestors ?b)
    do
        (remove-stmt ?0)
)

(add-rule "RR5" p2d
    if
        '(?a nm:hasAutoRelatedTag ?b)
        '(?a ?p ?b)
        '(?p nm:propertyOf nm:tagRelation)
        (not (equal nm:hasAutoRelatedTag ?p))
    do
        (remove-stmt ?0)
)

(add-rule "RR6" p2d
    if
        '(?a nm:hasDescendant ?b)
        '(?a nm:defineTag ?b)
    do
        (remove-stmt ?1)
)

(add-rule "RR7" p2d
    if
        '(?a nm:hasDescendant ?b)
        '(?b nm:beDefinedByTag ?a)
    do
        (remove-stmt ?1)
)


;; ------------------------------------------------------------------
;;  Auto completed rules
;; ------------------------------------------------------------------

;; If (A hasChild B) (A hasChild C) (B hasChild C) Then Remove (A hasChild C)
(add-rule "AC1" p2d
    if
        (var-changed ?model-state running completed)
        '(?a nm:beParentTagOf ?b)
        '(?b nm:beParentTagOf ?c)
        '(?a nm:beParentTagOf ?c)
        (not (equal ?a ?b))
        (not (equal ?b ?c))
        (not (equal ?a ?c))
    do
        (remove-stmt '(?a nm:beParentTagOf ?c))
        (remove-stmt '(?c nm:beChildTagOf ?a))
)

;; Build RelatedTags between tag XX and tag XX-YY
(add-rule "AC2" p2d
    if
        (var-changed ?model-state running completed)
        '(?t nm:typeOf nm:tag)
    do
        (if
            (str-match "%?-%?" (to-string ?t) '((ref ?t1) (ref ?t2)))
            (if
                (has-stmt p2d '((to-atom ?t1) nm:typeOf nm:tag))
                (-> p2d '(?t nm:hasAutoRelatedTag (to-atom ?t1)))
            )
        )
)


;; BuildSubCollection
;;(?a hasField ?f1-f2) (?a hasChild ?c) --> (?f1-f2 hasSubCollection ?c-f2) (?c-f2 isFieldOf ?c )
;;(?a hasField ?f)     (?a hasChild ?c) --> (?f hasSubCollection ?c-f)      (?c-f isFieldOf ?c  )
(add-rule "AC3" p2d
    if
        (var-changed ?model-state running completed)
        '(?a nm:typeOf nm:tag)
        '(?a nm:hasFieldTag ?f)
        '(?a nm:beParentTagOf ?c)
    do
        (let
            (?cf
                (to-atom (strcat (to-string ?c) "-" (get-field-name (get-uri-name ?f))))
            )
            (if
                (has-stmt p2d '(?cf nm:typeOf nm:tag))
                (do (-> '(?f nm:hasSubCollection ?cf)) (-> '(?cf nm:beFieldTagOf ?c)))
            )
        )
)


;; XM2BuildTagClass
;;(?c hasField ?f) (?c hasInstance ?i) (has ?i-f tag) --> (?i hasInstance ?i-f) (?f hasChild ?i-f)
(add-rule "AC4" p2d
    if
        (var-changed ?model-state running completed)
        '(?c nm:typeOf nm:tag)
        '(?c nm:hasFieldTag ?f)
        '(?c nm:beClassTagOf ?ins)
        (has-stmt
            p2d
            '((to-atom (strcat (to-string ?ins) "-" (get-uri-name ?f)))
                nm:typeOf
                nm:tag
            )
        )
    do
        (->
            '(?ins
                nm:hasFieldTag
                (to-atom (strcat (to-string ?ins) "-" (get-uri-name ?f)))
            )
            '(?f nm:beParentTagOf (to-atom (strcat (to-string ?ins) "-" (get-uri-name ?f))))
        )
)

;; Set topic tag if the tag name like "%?-Beginner"
(add-rule "AC5" p2d
    if
        (var-changed ?model-state running completed)
        '(?t nm:typeOf nm:tag)
        (str-end-with (get-uri-name ?t) "-Beginner")
    do
        (-> '(?t nm:beChildTagOf nt:$BEGINNER))
        (-> '(?t nm:beDefinedByTag nt:$TOPIC))
        (let        
            (?tn 
                (to-string ?t)
            )
            (let        
                (?dn 
                    (to-atom (str-substr ?tn 0 (- (length-of ?tn) 9)))
                )
                (if 
                    (has-stmt p2d '(?dn nm:typeOf nm:tag))
                    (-> '(?t nm:beDefinedByTag ?dn))
                )
            ) 
        )
)

;; (XX-YY typeof tag) (YY nm:hasTagAttr nm:commonTag) (XX typeof domain) -> (XX-YY nm:hasRelatedTag YY)
(add-rule "AC6" p2d
    if
        (var-changed ?model-state running completed)
        '(?t nm:typeOf nm:tag)
        (> (str-index-of (get-uri-name ?t) "-") 0)
    do
        (if
            (and
                (str-match "%?-%?" (get-uri-name ?t) '((ref ?xx) (ref ?yy)))
                (has-stmt p2d '((to-atom (strcat #ns_tag ?yy)) nm:hasTagAttr nm:commonTag))
                (has-stmt p2d '((to-atom (strcat #ns_domain ?xx)) nm:typeOf nm:domain))
            )
            (-> p2d '(?t nm:hasRelatedTag (to-atom (strcat #ns_tag ?yy))))
        )
)


;; (XX-YY typeof tag) (YY nm:hasTagAttr nm:groupTag) ->  (YY nm:hasGroupChild XX-YY)
(add-rule "AC7" p2d
    if
        (var-changed ?model-state running completed)
        '(?t nm:typeOf nm:tag)
        (> (str-index-of (get-uri-name ?t) "-") 0)
    do
        (if
            (and 
                (str-match "%?-%?" (get-uri-name ?t) '((ref ?xx) (ref ?yy)))
                (has-stmt p2d '((to-atom (strcat #ns_tag ?yy)) nm:hasTagAttr nm:groupTag))
            )
            (-> p2d '((to-atom (strcat #ns_tag ?yy)) nm:hasGroupChild ?t))
        )
)

;; (XX-YY typeof tag) (XX nm:hasTagAttr nm:itemTag) ->  (XX nm:beParentTagOf XX-YY)
(add-rule "AC8" p2d
    if
        (var-changed ?model-state running completed)
        '(?t nm:typeOf nm:tag)
        (> (str-index-of (get-uri-name ?t) "-") 0)
    do
        (if
            (and 
                (str-match "%?-%?" (get-uri-name ?t) '((ref ?xx) (ref ?yy)))
                (has-stmt p2d '((to-atom (strcat #ns_tag ?xx)) nm:hasTagAttr nm:itemTag))
            )
            (-> p2d '((to-atom (strcat #ns_tag ?xx)) nm:beParentTagOf ?t))
        )
)