(load (+ (file-parent ?script-path) "manners_16.rulp"))
;=>nil

(defun canBeCouple (?x ?y)
    (defvar ?rst (query-stmt mm ?v from canBeCouple:'(?x ?y ?v) limit 1))
    (if (is-empty ?rst)
        return false)
    (return (get ?rst 0))
)
;=>canBeCouple

(defun canSitTogether (?x ?y)
    (defvar ?rst (query-stmt mm ?v from canSitTogether:'(?x ?y ?v) limit 1))
    (if (is-empty ?rst)
        return false)
    (return (get ?rst 0))
)
;=>canSitTogether

(defun makeList ((?x int) ?y)
    (defvar ?arr (make-array ?x))
    (loop for ?x from 0 to (- ?x 1) do
        (seta ?arr ?x ?y)
    )
    (return (to-list ?arr))
)
;=>makeList

(defconst ?max_guess 16)
;=>?max_guess

(add-node mm seat:'((+ ?max_guess 1)))
;=>true

(add-rule mm if seat:'(?m ?...) guess:'(?g ?s) (< ?m ?max_guess) do 

    (loop for ?i from 1 to ?m do
        (if (= (get ?0 ?i) ?g) do
            (return)
        )
    )
    
    (if (> ?m 0) do
        (defvar ?x (get ?0 ?m))
        (if (not (canBeCouple ?x ?g))
            (return)
        )
    )
    
    (if (= (+ ?m 1) ?max_guess) do
        (defvar ?x (get ?0 1))
        (if (not (canBeCouple ?x ?g))
            (return)
        )
    )

    (defvar ?arr (to-array ?0))
    (seta ?arr 0 (+ ?m 1))
    (seta ?arr (+ ?m 1) ?g)
    
    (add-stmt mm seat ?arr)
)
;=>RU002

(list-source-node mm seat:'(?...))
;=>'(RU002)

(list-subgraph-for-query mm '(seat:'(?...)) true)
;=>'('('(seat:'(?_0 ?_1 ?_2 ?_3 ?_4 ?_5 ?_6 ?_7 ?_8 ?_9 ?_10 ?_11 ?_12 ?_13 ?_14 ?_15 ?_16) (< ?_0 16)) guess:'(?_17 ?_18)) '(seat:'(?_0 ?_1 ?_2 ?_3 ?_4 ?_5 ?_6 ?_7 ?_8 ?_9 ?_10 ?_11 ?_12 ?_13 ?_14 ?_15 ?_16) (< ?_0 16)) (inherit '('(seat:'(?_0 ?_1 ?_2 ?_3 ?_4 ?_5 ?_6 ?_7 ?_8 ?_9 ?_10 ?_11 ?_12 ?_13 ?_14 ?_15 ?_16) (< ?_0 16)) guess:'(?_17 ?_18)) 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17) guess:'(?_0 ?_1) seat:'(?_0 ?_1 ?_2 ?_3 ?_4 ?_5 ?_6 ?_7 ?_8 ?_9 ?_10 ?_11 ?_12 ?_13 ?_14 ?_15 ?_16) RU002)

(add-stmt mm seat (makeList (+ ?max_guess 1) 0))
;=>true

;;(setq ?model-trace true)
;;=>

(query-stmt mm '(?...) from seat:'(16 ?...) limit 1)
;err:
Can't query, the model is running
at (query-stmt mm ?v from canBeCouple:'(?x ?y ?v) limit 1) ; do-4
at (defvar ?rst (query-stmt mm ?v from canBeCouple:'(?x ?y ?v) limit 1)) ; do-4
at (do (defvar ?rst (query-stmt mm ?v from canBeCouple:'(?x ?y ?v) limit 1)) (if... ; _$fun$_canBeCouple-8
at (canBeCouple ?x ?g) ; do-5
at (not (canBeCouple ?x ?g)) ; do-5
at (if (not (canBeCouple ?x ?g)) (return)) ; do-5
at (do (defvar ?x (get seat:'(?m ?_tmp_seat_any_0 ?_tmp_seat_any_1 ?_tmp_seat_an... ; do-9
at (if (> ?m 0) do (defvar ?x (get seat:'(?m ?_tmp_seat_any_0 ?_tmp_seat_any_1 ?... ; do-9
at (do (loop for ?i from 1 to ?m do (if (= (get seat:'(?m ?_tmp_seat_any_0 ?_tmp... ; qf-RU002-10
at (query-stmt mm '(?...) from seat:'(16 ?...) limit 1) ; main-2
;eof

