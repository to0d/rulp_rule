(load (+ (file-parent ?script-path) "manners_16.rulp"))
;=>nil

(defun canBeCouple (?x ?y)
    (defvar ?rst (query-stmt mm ?v from canBeCouple:'(?x ?y ?v) limit 1))
    (if (is-empty ?rst)
        return false)
    (return (get ?rst 0))
)
;=>canBeCouple

(defun canSitTogether (?x ?y)
    (defvar ?rst (query-stmt mm ?v from canSitTogether:'(?x ?y ?v) limit 1))
    (if (is-empty ?rst)
        return false)
    (return (get ?rst 0))
)
;=>canSitTogether

(defun makeList ((?x int) ?y)
    (defvar ?arr (make-array ?x))
    (loop for ?x from 0 to (- ?x 1) do
        (seta ?arr ?x ?y)
    )
    (return (to-list ?arr))
)
;=>makeList

(defconst ?max_guess 16)
;=>?max_guess

(add-node mm seat:'((+ ?max_guess 1)))
;=>true

(add-rule mm if seat:'(?m ?...) guess:'(?g ?s) (< ?m ?max_guess) do 

    (foreach ?i from 1 to ?m do
        (if (= (get ?0 (- ?i 1)) ?g1) do
            (return)
        )
    )
    
    (if (> ?m 0) do
        (defvar ?x (get ?0 (- ?m 1)))
        (if (not (canBeCouple ?x ?g1))
            (return)
        )
    )
    
    (if (= (+ ?m 1) ?max_guess) do
        (defvar ?x (get ?0 0))
        (if (not (canBeCouple ?x ?g1))
            (return)
        )
    )
    
    (defvar ?arr (to-array ?0))
    (seta ?arr 0 (+ ?m 1))
    (seta ?arr ?m ?g1)
    
    (add-stmt mm seat ?arr)
)
;=>RU002

(add-stmt mm seat (makeList (+ ?max_guess 1) 0))
;=>true

(query-stmt mm '(?...) from seat:'(16 ?...) limit 1)
;=>'()

