(load (+ (file-parent ?script-path) "manners_4.rulp"))
;=>nil

(defun makeList ((?x int) ?y)
    (defvar ?arr (make-array ?x))
    (loop for ?x from 0 to (- ?x 1) do
        (seta ?arr ?x ?y)
    )
    (return (to-list ?arr))
)
;=>makeList

(defun getAt ((?rst list) (?index int)) 
    (if (is-empty ?rst)
        (return nil)
    )
    (if (<= (size-of ?rst) ?index)
        (return nil)
    )
    (return (get ?rst ?index))
)
;=>getAt

(add-constraint mm guess:'(?x ?y) (uniq on '(?x)))
;=>true

(defun canBeCouple (?g1 ?g2)
    
    (if (= ?g1 ?g2) do
        (return false)
    )

    (defvar ?s1 (compute-stmt mm ?v from guess:'(?g1 ?v)))
    (defvar ?s2 (compute-stmt mm ?v from guess:'(?g2 ?v)))
    
    (return (!= ?s1 ?s2))
)
;=>canBeCouple

(add-node-func mm canBeCouple:'(?g1 ?g2 (canBeCouple ?g1 ?g2)))
;=>true

(defun canSitTogether (?g1 ?g2)

    (if (= ?g1 ?g2) do
        (return false)
    )

    (if (not (compute-stmt mm ?v from canBeCouple:'(?g1 ?g2 ?v)))
        (return false)
    )

    (defvar ?rst (query-stmt mm ?h from hobby:'(?g1 ?h) hobby:'(?g2 ?h) limit 1))

    (return (!= nil (getAt ?rst 0)))
)
;=>canSitTogether

(add-node-func mm canSitTogether:'(?g1 ?g2 (canSitTogether ?g1 ?g2)))
;=>true

(defconst ?max_guess 4)
;=>?max_guess

(add-node mm seat:'((+ ?max_guess 1)))
;=>true

(add-rule mm if seat:'(?m ?...) guess:'(?g ?s) (< ?m ?max_guess) do 

    (loop for ?i from 1 to ?m do
        (if (= (get ?0 ?i) ?g) do
            (return)
        )
    )
    
    (if (> ?m 0) do
        (defvar ?x (get ?0 ?m))
        (if (not (compute-stmt mm ?v from canSitTogether:'(?x ?g ?v)))
            (return)
        )
    )
    
    (if (= (+ ?m 1) ?max_guess) do
        (defvar ?x (get ?0 1))
        (if (not (compute-stmt mm ?v from canSitTogether:'(?x ?g ?v)))
            (return)
        )
    )

    (defvar ?arr (to-array ?0))
    (seta ?arr 0 (+ ?m 1))
    (seta ?arr (+ ?m 1) ?g)
    
    (println "Test: " ?arr)
    
    (add-stmt mm seat ?arr)
)
;=>RU000

(add-stmt mm seat (makeList (+ ?max_guess 1) 0))
;=>true

;(setq ?model-trace true)
;;=>

(query-stmt mm '(?...) from seat:'(4 ?...) limit 1)
;=>'('(1 3 2 4))
;out:
Test: {1,1,0,0,0}
Test: {1,2,0,0,0}
Test: {1,3,0,0,0}
Test: {1,4,0,0,0}
Test: {2,1,3,0,0}
Test: {2,1,4,0,0}
Test: {2,2,3,0,0}
Test: {2,2,4,0,0}
Test: {2,3,1,0,0}
Test: {2,3,2,0,0}
Test: {2,4,1,0,0}
Test: {2,4,2,0,0}
Test: {3,1,3,2,0}
Test: {3,1,4,2,0}
Test: {3,2,3,1,0}
Test: {3,2,4,1,0}
Test: {3,3,1,4,0}
Test: {3,3,2,4,0}
Test: {3,4,1,3,0}
Test: {3,4,2,3,0}
Test: {4,1,3,2,4}
Test: {4,1,4,2,3}
Test: {4,2,3,1,4}
Test: {4,2,4,1,3}
Test: {4,3,1,4,2}
Test: {4,3,2,4,1}
Test: {4,4,1,3,2}
Test: {4,4,2,3,1}

;eof

