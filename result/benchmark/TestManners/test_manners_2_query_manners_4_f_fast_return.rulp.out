(load (+ (file-parent ?script-path) "manners_4.rulp"))
;=>nil

(defun makeList ((?x int) ?y)
    (defvar ?arr (make-array ?x))
    (loop for ?x from 0 to (- ?x 1) do
        (seta ?arr ?x ?y)
    )
    (return (to-list ?arr))
)
;=>makeList

(defun getAt ((?rst list) (?index int)) 
    (if (is-empty ?rst)
        (return nil)
    )
    (if (<= (size-of ?rst) ?index)
        (return nil)
    )
    (return (get ?rst ?index))
)
;=>getAt

(add-constraint mm guess:'(?x ?y) (uniq on '(?x)))
;=>true

(defun canBeCouple (?g1 ?g2)
    
    (if (= ?g1 ?g2) do
        (return false)
    )

    (defvar ?s1 (compute-stmt mm ?v from guess:'(?g1 ?v)))
    (defvar ?s2 (compute-stmt mm ?v from guess:'(?g2 ?v)))
    
    (return (!= ?s1 ?s2))
)
;=>canBeCouple

(add-node-func mm canBeCouple:'(?g1 ?g2 (canBeCouple ?g1 ?g2)))
;=>true

(defun canSitTogether (?g1 ?g2)

    (if (= ?g1 ?g2) do
        (return false)
    )

    (if (not (compute-stmt mm ?v from canBeCouple:'(?g1 ?g2 ?v)))
        (return false)
    )

    (defvar ?rst (query-stmt mm ?h from hobby:'(?g1 ?h) hobby:'(?g2 ?h) limit 1))

    (return (!= nil (getAt ?rst 0)))
)
;=>canSitTogether

(add-node-func mm canSitTogether:'(?g1 ?g2 (canSitTogether ?g1 ?g2)))
;=>true

(defvar ?all_guesses (query-stmt mm ?g from guess:'(?g ?s)))
;=>&?all_guesses

(println ?all_guesses)
;=>nil
;out:
'(1 2 3 4)

;eof

(defconst ?max_guess (size-of ?all_guesses))
;=>?max_guess

(defvar ?idx 0)
;=>&?idx

(defun canSeat (?list ?pos ?gindex)

    (if (= ?pos 0) do
        (return true)
    )

    (loop for ?i from 1 to ?pos do
        (if (= (get ?list ?i) ?gindex) do
            (return false)
        )
    )
    
    (defvar ?g (get ?all_guesses ?gindex))    
    (defvar ?pre (get ?all_guesses (get ?list ?pos)))    
    (if (not (compute-stmt mm ?v from canSitTogether:'(?pre ?g ?v)))
        (return false)
    )    
    
    (if (= (+ ?pos 1) ?max_guess) do
        (defvar ?first (get ?all_guesses (get ?list 1)))
        (if (not (compute-stmt mm ?v from canSitTogether:'(?first ?g ?v)))
            (return false)
        )
    )
    
    (return true)
)
 
(defun _query_init ()

    (add-node mm seat:'((+ ?max_guess 1)))
    (add-stmt mm seat (makeList (+ ?max_guess 1) 0))

    ; deep search
    (add-rule mm if seat:'(?m ?...) (< ?m ?max_guess) do 
        (++ ?idx)        
        (loop for ?i from 0 to (- ?max_guess 1) do                     
            (if (canSeat ?0 ?m ?i) do            
                (defvar ?arr (to-array ?0))
                (seta ?arr 0 (+ ?m 1))
                (seta ?arr (+ ?m 1) ?i)                
                (add-stmt mm seat ?arr)  
                (println "" ?idx ": deep," ?0 " -> " ?arr)
                (return)            
            )
        )
        
        (println "" ?idx ": deep," ?0 " -> none")
    )[high-priority]

    ; width search
    (add-rule mm if seat:'(?m ?...) (> ?m 0) (< ?m ?max_guess) do 

        (++ ?idx)        
        
        (defvar ?gindex (get ?0 ?m))
        (if (= ?gindex (- ?max_guess 0)) do
            (println "" ?idx ": width," ?0 ", back")
            (return)
        )
        
        (loop for ?i from (+ ?gindex 1) to (- ?max_guess 1) do
            (if (canSeat ?0 (- ?m 1) ?i) do            
                (defvar ?arr (to-array ?0))
                (seta ?arr ?m ?i)                
                (add-stmt mm seat ?arr) 
                (println "" ?idx ": width," ?0 " -> " ?arr)               
                (return)            
            )
        )
        
        (println "" ?idx ": width," ?0 " -> none")
    )
)
;=>canSeat _query_init

;(setq ?model-trace true)
;;=>

(query-stmt mm '(?...) from seat:'(4 ?...) limit 1
    init  (_query_init)
    ~init (dump-status mm (+ ?script-path ".status.1.txt"))
          (dump-entry-info mm (+ ?script-path ".entry.1.txt"))
    gc
)
;=>'('(0 2 1 3))
;out:
1: deep,seat:'(0 0 0 0 0) -> {1,0,0,0,0}
2: deep,seat:'(1 0 0 0 0) -> {2,0,2,0,0}
3: deep,seat:'(2 0 2 0 0) -> {3,0,2,1,0}
4: deep,seat:'(3 0 2 1 0) -> {4,0,2,1,3}

;eof

(dump-status mm (+ ?script-path ".status.2.txt"))
;=>nil

(dump-entry-info mm (+ ?script-path ".entry.2.txt"))
;=>nil

