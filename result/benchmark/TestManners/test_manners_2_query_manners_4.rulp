(load (+ (file-parent ?script-path) "manners_4.rulp"))
;=>

(defun makeList ((?x int) ?y)
    (defvar ?arr (make-array ?x))
    (loop for ?x from 0 to (- ?x 1) do
        (seta ?arr ?x ?y)
    )
    (return (to-list ?arr))
)
;=>

(setq ?model-trace true)
;=>

(list-subgraph-for-query mm '(canSitTogether:'(1 2 ?v)) true)
;=>

(query-stmt mm ?v from canSitTogether:'(1 2 ?v) limit 1)
;=>'(1)

(canSitTogether 1 2)
;=>

(defconst ?max_guess 4)
;=>

(add-node mm seat:'((+ ?max_guess 1)))
;=>

(add-rule mm if seat:'(?m ?...) guess:'(?g ?s) (< ?m ?max_guess) do 

    (loop for ?i from 1 to ?m do
        (if (= (get ?0 ?i) ?g) do
            (return)
        )
    )
    
    (if (> ?m 0) do
        (defvar ?x (get ?0 ?m))
        (if (not (canSitTogether ?x ?g))
            (return)
        )
    )
    
    (if (= (+ ?m 1) ?max_guess) do
        (defvar ?x (get ?0 1))
        (if (not (canSitTogether ?x ?g))
            (return)
        )
    )

    (defvar ?arr (to-array ?0))
    (seta ?arr 0 (+ ?m 1))
    (seta ?arr (+ ?m 1) ?g)
    
    (add-stmt mm seat ?arr)
)
;=>

(list-source-node mm seat:'(?...))
;=>

(list-subgraph-for-query mm '(seat:'(?...)) true)
;=>

(add-stmt mm seat (makeList (+ ?max_guess 1) 0))
;=>

;(setq ?model-trace true)
;;=>

(query-stmt mm '(?...) from seat:'(4 ?...) limit 1)
;=>