(load (+ (file-parent ?script-path) "manners_4.rulp"))
;=>nil

(defun makeList ((?x int) ?y)
    (defvar ?arr (make-array ?x))
    (loop for ?x from 0 to (- ?x 1) do
        (seta ?arr ?x ?y)
    )
    (return (to-list ?arr))
)
;=>makeList

(defun getAt ((?rst list) (?index int)) 
    (if (is-empty ?rst)
        (return nil)
    )
    (if (<= (size-of ?rst) ?index)
        (return nil)
    )
    (return (get ?rst ?index))
)
;=>getAt

(add-constraint mm guess:'(?x ?y) (uniq on '(?x)))
;=>true

(defun canBeCouple (?g1 ?g2)
    
    (if (= ?g1 ?g2) do
        (return false)
    )

    (defvar ?s1 (compute-stmt mm ?v from guess:'(?g1 ?v)))
    (defvar ?s2 (compute-stmt mm ?v from guess:'(?g2 ?v)))
    
    (return (!= ?s1 ?s2))
)
;=>canBeCouple

(add-node-func mm canBeCouple:'(?g1 ?g2 (canBeCouple ?g1 ?g2)))
;=>true

(defun canSitTogether (?g1 ?g2)

    (if (= ?g1 ?g2) do
        (return false)
    )

    (if (not (compute-stmt mm ?v from canBeCouple:'(?g1 ?g2 ?v)))
        (return false)
    )

    (defvar ?rst (query-stmt mm ?h from hobby:'(?g1 ?h) hobby:'(?g2 ?h) limit 1))

    (return (!= nil (getAt ?rst 0)))
)
;=>canSitTogether

(add-node-func mm canSitTogether:'(?g1 ?g2 (canSitTogether ?g1 ?g2)))
;=>true

(defconst ?max_guess 4)
;=>?max_guess

(defvar ?idx 0)
;=>&?idx

 
(defun _query_init ()

    (add-node mm seat:'((+ ?max_guess 1)))
    (add-stmt mm seat (makeList (+ ?max_guess 1) 0))


    (add-rule mm if seat:'(?m ?...) guess:'(?g ?s) (< ?m ?max_guess) do 

        (println "" ?idx ": " ?0 " " ?1)
        (++ ?idx)
        
        (loop for ?i from 1 to ?m do
            (if (= (get ?0 ?i) ?g) do
                (return)
            )
        )
        
        (if (> ?m 0) do
            (defvar ?x (get ?0 ?m))
            (if (not (compute-stmt mm ?v from canSitTogether:'(?x ?g ?v)))
                (return)
            )
        )
        
        (if (= (+ ?m 1) ?max_guess) do
            (defvar ?x (get ?0 1))
            (if (not (compute-stmt mm ?v from canSitTogether:'(?x ?g ?v)))
                (return)
            )
        )

        (defvar ?arr (to-array ?0))
        (seta ?arr 0 (+ ?m 1))
        (seta ?arr (+ ?m 1) ?g)
        
        (add-stmt mm seat ?arr)
    )
)
;=>_query_init

;(setq ?model-trace true)
;;=>

(query-stmt mm '(?...) from seat:'(4 ?...) limit 1
    init  (_query_init)
    ~init (dump-status mm (+ ?script-path ".status.1.txt"))
          (dump-entry-info mm (+ ?script-path ".entry.1.txt"))
    gc
)
;=>'('(2 3 1 4))
;out:
0: seat:'(0 0 0 0 0) guess:'(1 f)
1: seat:'(1 1 0 0 0) guess:'(1 f)
2: seat:'(1 1 0 0 0) guess:'(2 f)
3: seat:'(0 0 0 0 0) guess:'(2 f)
4: seat:'(1 2 0 0 0) guess:'(1 f)
5: seat:'(1 2 0 0 0) guess:'(2 f)
6: seat:'(1 2 0 0 0) guess:'(3 m)
7: seat:'(0 0 0 0 0) guess:'(3 m)
8: seat:'(1 1 0 0 0) guess:'(3 m)
9: seat:'(2 2 3 0 0) guess:'(1 f)
10: seat:'(2 2 3 0 0) guess:'(2 f)
11: seat:'(2 2 3 0 0) guess:'(3 m)
12: seat:'(2 2 3 0 0) guess:'(4 m)
13: seat:'(0 0 0 0 0) guess:'(4 m)
14: seat:'(1 1 0 0 0) guess:'(4 m)
15: seat:'(1 2 0 0 0) guess:'(4 m)
16: seat:'(1 3 0 0 0) guess:'(1 f)
17: seat:'(1 3 0 0 0) guess:'(2 f)
18: seat:'(1 3 0 0 0) guess:'(3 m)
19: seat:'(1 3 0 0 0) guess:'(4 m)
20: seat:'(2 1 3 0 0) guess:'(1 f)
21: seat:'(2 1 3 0 0) guess:'(2 f)
22: seat:'(2 1 3 0 0) guess:'(3 m)
23: seat:'(2 1 3 0 0) guess:'(4 m)
24: seat:'(3 2 3 1 0) guess:'(1 f)
25: seat:'(3 2 3 1 0) guess:'(2 f)
26: seat:'(3 2 3 1 0) guess:'(3 m)
27: seat:'(3 2 3 1 0) guess:'(4 m)

;eof

(dump-status mm (+ ?script-path ".status.2.txt"))
;=>nil

(dump-entry-info mm (+ ?script-path ".entry.2.txt"))
;=>nil

