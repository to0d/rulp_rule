
(alias add-stmt ->)

(defun size-of ((?m model)) (return (size-of-model ?m)))

(defmacro list-with-state
    (?list ?state)
    (foreach 
        (?e ?list)
        (if 
            (not (equal (state-of ?e) ?state))
            (continue)) 
        (return ?e)))
        
(defmacro list-without-state
    (?list ?state)
    (foreach 
        (?e ?list)
        (if 
            (equal (state-of ?e) ?state)
            (continue)) 
        (return ?e)))


(defclass scope () final
    (defvar ?impl nil private)
    
    (defun init () 
        (setq ?impl (scope::_scope_init this)))
        
    (defun init (?m) 
        (setq ?impl (scope::_scope_init this)))
    
    (defun define (?var ?type ?from ?to)
        (return (scope::_scope_define ?impl ?var ?type ?from ?to)))

    (defun assert ((?expr expr))
        (return (scope::_scope_assert ?impl ?expr)))
    
    (defun query ((?query-list list) (?query-modifier list))
        (return (scope::_scope_query ?impl ?query-list ?query-modifier)))
    
    (defun query ((?query-list list))
        (return (scope::_scope_query ?impl ?query-list '())))
        
    (defun get-model () 
        (return ?impl::?default-scope-model))

    (defun get-impl () 
        (return ?impl))

)


(defun init-str-sql-schema((?m model))

    (if (value-of ?m::?str-sql-init) (return)) 

    ;; table definition
    (add-node ?m _STR_TABLE:'(1))
    (add-constraint ?m _STR_TABLE:'(?_name_) '(type string on ?_name_))
    (add-stmt ?m _STR_TABLE:'("_STR_TABLE"))
    (add-stmt ?m _STR_TABLE:'("_STR_COLUMN"))
    
    ;; column definition 
    (add-node ?m _STR_COLUMN:'(4))
    (add-constraint ?m _STR_COLUMN:'(?_table_ ?_column_ ?_index_ ?_type_) '(type string on ?_table_))
    (add-constraint ?m _STR_COLUMN:'(?_table_ ?_column_ ?_index_ ?_type_) '(type string on ?_column_))
    (add-constraint ?m _STR_COLUMN:'(?_table_ ?_column_ ?_index_ ?_type_) '(type int on ?_index_))
    (add-stmt ?m _STR_COLUMN:'("_STR_TABLE" "TABLE_NAME"   0 string))
    (add-stmt ?m _STR_COLUMN:'("_STR_TABLE" "COLUMN_NAME"  1 string))
    (add-stmt ?m _STR_COLUMN:'("_STR_TABLE" "COLUMN_INDEX" 2 int))
    (add-stmt ?m _STR_COLUMN:'("_STR_TABLE" "COLUMN_TYPE"  3 nil))

    (setq ?m::?str-sql-init true)
)

(defun query-sql-table-names((?m model))
    (return (query-stmt ?m ?x from _STR_TABLE_NAMES:'(?x)))
)

(defun has-sql-table-names((?m model) (?table string))
    (return (has-stmt ?m _STR_TABLE_NAMES:'(?table)))
)

(defun add-sql-table((?m model) (?table string) (?size int))
    (init-str-sql-schema ?m)
    (add-node ?m (to-named-list ?table '(?size)))
    (add-stmt ?m _STR_TABLE:'(?table))
)

(defun add-sql-column((?m model) (?table string) (?column string) (?index int) (?type))
    (add-stmt ?m _STR_COLUMN:'(?table ?column ?index ?type))
    (if (not (equal ?type nil)) 
        (add-constraint ?m (to-named-list ?table '(?...)) '(type ?type on ?index)))
)






