
(alias add-stmt ->)

(defun size-of ((?m model)) (return (size-of-model ?m)))

(defmacro list-with-state
    (?list ?state)
    (foreach 
        (?e ?list)
        (if 
            (not (equal (state-of ?e) ?state))
            (continue)) 
        (return ?e)))
        
(defmacro list-without-state
    (?list ?state)
    (foreach 
        (?e ?list)
        (if 
            (equal (state-of ?e) ?state)
            (continue)) 
        (return ?e)))


(defclass scope () final
    (defvar ?impl nil private)
    
    (defun init () 
        (setq ?impl (scope::_scope_init this)))
        
    (defun init (?m) 
        (setq ?impl (scope::_scope_init this)))
    
    (defun define (?var ?type ?from ?to)
        (return (scope::_scope_define ?impl ?var ?type ?from ?to)))

    (defun assert ((?expr expr))
        (return (scope::_scope_assert ?impl ?expr)))
    
    (defun query ((?query-list list) (?query-modifier list))
        (return (scope::_scope_query ?impl ?query-list ?query-modifier)))
    
    (defun query ((?query-list list))
        (return (scope::_scope_query ?impl ?query-list '())))
        
    (defun get-model () 
        (return ?impl::?default-scope-model))

    (defun get-impl () 
        (return ?impl))

)

(defun init_cst_rule ((?m model))

    (if (equal ?m::?cst-init true)
        (return))
            
    (add-rule "CST01" ?m::$cst$ 
        if  $cst_type$:'(?node ?index ?type1) $cst_type$:'(?node ?index ?type2) (not (equal ?type1 ?type2)) 
        do 
            (defvar ?msg (+ "conflict-type-constraint:'(" ?node " " ?index " " ?type1 " " ?type2 ")"))
            (-> $invalid_constraint$:'(?msg))
    )

    (setq ?m::?cst-init true)
)

(defun add_cst_constraint_type ((?m model) (?node string) ?index ?type)
    (init_cst_rule ?m)        
    (add-stmt ?m $cst_type$:'(?node ?index ?type))
    (query-stmt ?m::$cst$ '(?c) from $invalid_constraint$:'(?c) 
            do (remove-stmt ?m $cst_type$:'(?node ?index ?type)) 
               (error add-constraint-fail (+ "type-constraint:'(" ?node " " ?index " " ?type "), " ?c))  limit 1)
    
    (defvar ?update (add-constraint ?m (to-named-list ?node '(?...)) '(type ?type on (to-atom (+ "?" ?index)))))
    (return (> ?update 0))
)

(defun add_cst_constraint_max ((?m model) (?node string) ?index (?value int))
    (init_cst_rule ?m)        
    (add-stmt ?m $cst_max$:'(?node ?index ?value))
    (query-stmt ?m::$cst$ '(?c) from $invalid_constraint$:'(?c) 
            do (remove-stmt ?m $cst_max$:'(?node ?index ?value)) 
               (error add-constraint-fail (+ "max-constraint:'(" ?node " " ?index " " ?value "), " ?c))  limit 1)
    
    (defvar ?update (add-constraint ?m (to-named-list ?node '(?...)) '(max ?value on (to-atom (+ "?" ?index)))))
    (return (> ?update 0))
)

(defun add_cst_constraint_min ((?m model) (?node string) ?index (?value int))
    (init_cst_rule ?m)        
    (add-stmt ?m $cst_min$:'(?node ?index ?value))
    (query-stmt ?m::$cst$ '(?c) from $invalid_constraint$:'(?c) 
            do (remove-stmt ?m $cst_min$:'(?node ?index ?value)) 
               (error add-constraint-fail (+ "min-constraint:'(" ?node " " ?index " " ?value "), " ?c))  limit 1)

    (defvar ?update (add-constraint ?m (to-named-list ?node '(?...)) '(min ?value on (to-atom (+ "?" ?index)))))
    (return (> ?update 0))
)


;;(defun add_cst_constraint_index_1 ((?m model) (?node string) ?index ?cst_type)
;;    (init_cst_rule ?m)        
;;    (add-stmt ?m $cst_index_1:'(?node ?index ?cst_type))
;;    (query-stmt ?m::$cst$ '(?r ?c1 ?c2) from $invalid_constraint$:'(?r ?c1 ?c2) 
;;            do (remove-stmt ?m $cst_type$:'(?node ?index ?type)) 
;;               (error add-constraint-fail (+ ?r ?c1 ?c2))
;;    limit 1)
;;)

