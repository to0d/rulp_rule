
(alias add-stmt ->)

(defun size-of ((?m model)) (return (size-of-model ?m)))

(defmacro list-with-state
    (?list ?state)
    (foreach 
        (?e ?list)
        (if 
            (not (equal (state-of ?e) ?state))
            (continue)) 
        (return ?e)))
        
(defmacro list-without-state
    (?list ?state)
    (foreach 
        (?e ?list)
        (if 
            (equal (state-of ?e) ?state)
            (continue)) 
        (return ?e)))


(defclass scope () final
    (defvar ?impl nil private)
    
    (defun init () 
        (setq ?impl (scope::_scope_init this)))
        
    (defun init (?m) 
        (setq ?impl (scope::_scope_init this)))
    
    (defun define (?var ?type ?from ?to)
        (return (scope::_scope_define ?impl ?var ?type ?from ?to)))

    (defun assert ((?expr expr))
        (return (scope::_scope_assert ?impl ?expr)))
    
    (defun query ((?query-list list) (?query-modifier list))
        (return (scope::_scope_query ?impl ?query-list ?query-modifier)))
    
    (defun query ((?query-list list))
        (return (scope::_scope_query ?impl ?query-list '())))
        
    (defun get-model () 
        (return ?impl::?default-scope-model))

    (defun get-impl () 
        (return ?impl))

)

(defun init_cst_rule ((?m model))

    (if (equal ?m::?cst-init true)
        (return))
            
    (add-rule ?m::$cst$ 
        if  $cst_type$:'(?node ?index ?type1) $cst_type$:'(?node ?index ?type2) (not (equal ?type1 ?type2)) 
        do 
            (-> $cst_conflict_constraint$:'(?node ?index ?type1 ?type2))
    )
    
    (setq ?m::?cst-init true)
)

(defun add_cst_type_constraint ((?m model) (?node string) ?index ?type)
    (init_cst_rule ?m)        
    (add-stmt ?m $cst_type$:'(?node ?index ?type))
    (query-stmt ?m::$cst$ '(?n ?i ?t1 ?t2) from $cst_conflict_constraint$:'(?n ?i ?t1 ?t2) 
            do (remove-stmt ?m $cst_type$:'(?node ?index ?type)) 
               (error add-constraint-fail (+ "conflict-constraint: node=" ?n ", index=" ?i ", type1=" ?t1 ", type2=" ?t2))
    limit 1)
)


